@page "/allusers"
@using Microsoft.Identity.Client;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>All Users</h3>
@strError
<br />
<p>Administration Group: <b>@AdministrationGroup</b></p>
<p><b>Groups of current user:</b></p>
<ul class="list-group">
    @foreach (var group in colGroups)
    {
        <li class="list-group-item">
            <p>Group Name: @group.displayName</p>
            <p>Id: @group.id</p>
        </li>
    }
</ul>
<br />
<p><b>All Users:</b></p>
<ul class="list-group">
    @foreach (var user in colGraphUsers.OrderBy(x => x.displayName))
    {
        <li class="list-group-item">
            <p>Display Name: @user.displayName</p>
            <p>userPrincipalName: @user.userPrincipalName</p>
            <p>id: @user.id</p>
        </li>
    }
</ul>
@code {
    string strError = "";
    string AdministrationGroup;
    // Collection to hold all the Tasks
    List<GraphUser> colGraphUsers = new List<GraphUser>();
    List<GraphGroup> colGroups = new List<GraphGroup>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AdministrationGroup = _configuration["AzureAdB2CManagement:AdministrationGroup"];

            IConfidentialClientApplication confidentialClientApplication =
                ConfidentialClientApplicationBuilder
                .Create(_configuration["AzureAdB2CManagement:ClientId"])
                .WithTenantId(_configuration["AzureAdB2CManagement:Tenant"])
                .WithClientSecret(_configuration["AzureAdB2CManagement:ClientSecret"])
                .Build();

            // With client credentials flows the scopes is ALWAYS of the shape
            // "resource/.default", as the
            // application permissions need to be set statically
            // (in the portal or by PowerShell),
            // and then granted by a tenant administrator
            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            AuthenticationResult result = null;

            result = await confidentialClientApplication.AcquireTokenForClient(scopes)
                .ExecuteAsync();

            var httpClient = new HttpClient();
            var apiCaller = new ProtectedApiCallHelper(httpClient);
            await apiCaller
                .CallWebApiAndProcessResultASync(
                "https://graph.microsoft.com/v1.0/users",
                result.AccessToken,
                DisplayUsers
                );

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var user = authState.User;

            var UserID = user.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

            await apiCaller.CallWebApiAndProcessResultASync(
                $"https://graph.microsoft.com/v1.0/users/{UserID}/memberOf",
                result.AccessToken,
                DisplayGroups
                );

        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private void DisplayUsers(JObject result)
    {
        colGraphUsers = new List<GraphUser>();
        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            colGraphUsers.AddRange(
                child.Value.ToObject<List<GraphUser>>()
                );
        }
    }

    private void DisplayGroups(JObject result)
    {
        colGroups = new List<GraphGroup>();

        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            colGroups.AddRange(
            child.Value.ToObject<List<GraphGroup>>()
            );
        }
    }
}