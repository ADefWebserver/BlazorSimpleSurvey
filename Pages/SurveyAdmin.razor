@page "/surveyadmin"
@using Microsoft.Identity.Client;
@using Models;
@using Newtonsoft.Json.Linq;
@using BlazorSimpleSurvey.Data;
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService dialogService
@inherits OwningComponentBase<SimpleSurveyService>
<h3>Survey Administration</h3>
@strError
@*
    @if (isAdmin)
    {
*@
<RadzenDropDown TValue="Survey"
                Data="colSurveys"
                TextProperty="SurveyName"
                @bind-Value="SelectedSurvey"
                Change="@(args => SurveyChange(args))"
                Style="margin-bottom: 20px" />
@*<RadzenButton Text="New" Click="@(args => 
                                dialogService.Open<EditUser>($"Edit {GraphUser.displayName}",
                                new Dictionary<string, object>() { { "GraphUser", GraphUser } },
                                new DialogOptions(){ Width = "700px", Height = "450px" }))" 
                                  />*@
<br />
@if (SelectedSurvey != null)
{
    <p>Selected Survey: @SelectedSurvey.SurveyName</p>
    <p>Date Created: @SelectedSurvey.DateCreated.ToShortDateString()</p>
}
@*
    }
*@

@code {
    HttpClient httpClient;
    ProtectedApiCallHelper apiCaller;
    AuthenticationResult result = null;

    string strError = "";
    string AdministrationGroup;
    bool isAdmin = false;

    List<GraphUser> colGraphUsers = new List<GraphUser>();
    List<GraphGroup> colGroups = new List<GraphGroup>();

    List<Survey> colSurveys = new List<Survey>();
    Survey SelectedSurvey;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AdministrationGroup = _configuration["AzureAdB2CManagement:AdministrationGroup"];

            IConfidentialClientApplication confidentialClientApplication =
                ConfidentialClientApplicationBuilder
                .Create(_configuration["AzureAdB2CManagement:ClientId"])
                .WithTenantId(_configuration["AzureAdB2CManagement:Tenant"])
                .WithClientSecret(_configuration["AzureAdB2CManagement:ClientSecret"])
                .Build();

            // With client credentials flows the scopes is ALWAYS of the shape
            // "resource/.default", as the
            // application permissions need to be set statically
            // (in the portal or by PowerShell),
            // and then granted by a tenant administrator
            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            result = await confidentialClientApplication.AcquireTokenForClient(scopes)
                .ExecuteAsync();

            httpClient = new HttpClient();

            apiCaller = new ProtectedApiCallHelper(httpClient);

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var user = authState.User;

            var UserID =
                user.Claims.FirstOrDefault(
                    c => c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?
                    .Value;

            if (UserID != null)
            {
                await apiCaller.CallWebApiAndProcessResultASync(
                    $"https://graph.microsoft.com/v1.0/users/{UserID}/memberOf",
                    result.AccessToken,
                    DisplayGroups
                    );
            }

            colSurveys = await @Service.GetAllSurveysAsync();

            if (colSurveys.Count > 0)
            {
                SelectedSurvey = colSurveys.FirstOrDefault();
                SurveyChange(SelectedSurvey);
            }
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private void DisplayGroups(JObject result)
    {
        colGroups = new List<GraphGroup>();

        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            colGroups.AddRange(
            child.Value.ToObject<List<GraphGroup>>()
            );
        }

        if (AdministrationGroup != "")
        {
            isAdmin =
                (colGroups
                .Where(x => x.displayName.ToLower() == AdministrationGroup.ToLower())
                .FirstOrDefault() != null);
        }
    }

    void SurveyChange(object value)
    {
        var str = value;
    }
}