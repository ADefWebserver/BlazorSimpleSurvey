@page "/surveyadmin"
@using Microsoft.Identity.Client;
@using Models;
@using Newtonsoft.Json.Linq;
@using BlazorSimpleSurvey.Data;
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService dialogService
@inject TooltipService tooltipService
@inherits OwningComponentBase<SimpleSurveyService>
@strError
@*
    @if (isAdmin)
    {
*@
<div>
    <div>
        <h2>
            <RadzenButton ButtonStyle="ButtonStyle.Success"
                          Size="Radzen.ButtonSize.Medium"
                          MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text= "New Survey" }))"
                          Icon="addchart" Click="@(args =>
                                  dialogService.Open<EditSurvey>($"New Survey",
                                  new Dictionary<string, object>() { { "SelectedSurvey", new Survey() { Id = -1 } } },
                                  new DialogOptions() { Width = "500px", Height = "280px" }))" />
            Survey Administration
        </h2>
        <br />
    </div>
    @if (ExistingSurveys == null)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
    else
    {
        @if (ExistingSurveys.Value == true)
        {
            <RadzenButton ButtonStyle="ButtonStyle.Success"
                          Style="vertical-align:top"
                          Size="Radzen.ButtonSize.Medium"
                          Icon="add"
                          MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text= "New Survey Item" }))"
                          Click="@(args =>
                                  dialogService.Open<EditSurveyItem>($"New Survey Item",
                                  new Dictionary<string, object>() { { "SelectedSurveyItem", new SurveyItem() { Id = -1, SurveyNavigation = SelectedSurvey } } },
                                  new DialogOptions() { Width = "500px", Height = "380px" }))" />
            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                          Style="vertical-align:top"
                          Size="Radzen.ButtonSize.Medium"
                          MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text= "Edit Survey" }))"
                          Icon="edit" Click="@(args =>
                                  dialogService.Open<EditSurvey>($"Edit Survey",
                                  new Dictionary<string, object>() { { "SelectedSurvey", SelectedSurvey } },
                                  new DialogOptions() { Width = "500px", Height = "280px" }))" />
            <RadzenDropDown TValue="Survey"
                            Data="@colSurveys"
                            TextProperty="SurveyName"
                            @bind-Value="SelectedSurvey"
                            Change="@(args => SelectedSurveyChange(args))" />

            <br />
        }
    }
</div>
<br />
@if (SelectedSurvey != null)
{
    <p>Selected Survey: @SelectedSurvey.SurveyName</p>
    <p>Date Created: @SelectedSurvey.DateCreated.ToShortDateString()</p>
}
@*
    }
*@

@code {
    HttpClient httpClient;
    ProtectedApiCallHelper apiCaller;
    AuthenticationResult result = null;

    string strError = "";
    bool? ExistingSurveys = null;
    string AdministrationGroup;
    bool isAdmin = false;

    List<GraphUser> colGraphUsers = new List<GraphUser>();
    List<GraphGroup> colGroups = new List<GraphGroup>();

    List<Survey> colSurveys = new List<Survey>();
    Survey SelectedSurvey;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // detect when a dialog has closed
            dialogService.OnClose += DialogClose;

            AdministrationGroup = _configuration["AzureAdB2CManagement:AdministrationGroup"];

            IConfidentialClientApplication confidentialClientApplication =
                ConfidentialClientApplicationBuilder
                .Create(_configuration["AzureAdB2CManagement:ClientId"])
                .WithTenantId(_configuration["AzureAdB2CManagement:Tenant"])
                .WithClientSecret(_configuration["AzureAdB2CManagement:ClientSecret"])
                .Build();

            // With client credentials flows the scopes is ALWAYS of the shape
            // "resource/.default", as the
            // application permissions need to be set statically
            // (in the portal or by PowerShell),
            // and then granted by a tenant administrator
            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            result = await confidentialClientApplication.AcquireTokenForClient(scopes)
                .ExecuteAsync();

            httpClient = new HttpClient();

            apiCaller = new ProtectedApiCallHelper(httpClient);

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var user = authState.User;

            var UserID =
                user.Claims.FirstOrDefault(
                    c => c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?
                    .Value;

            if (UserID != null)
            {
                await apiCaller.CallWebApiAndProcessResultASync(
                    $"https://graph.microsoft.com/v1.0/users/{UserID}/memberOf",
                    result.AccessToken,
                    DisplayGroups
                    );
            }

            colSurveys = await @Service.GetAllSurveysAsync();

            if (colSurveys.Count > 0)
            {
                ExistingSurveys = true;
                SelectedSurvey = colSurveys.FirstOrDefault();
                SelectedSurveyChange(SelectedSurvey);
            }
            else
            {
                ExistingSurveys = false;
            }
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
    {
        tooltipService.Open(elementReference, options.Text, options);
    }

    private void DisplayGroups(JObject result)
    {
        colGroups = new List<GraphGroup>();

        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            colGroups.AddRange(
            child.Value.ToObject<List<GraphGroup>>()
            );
        }

        if (AdministrationGroup != "")
        {
            isAdmin =
                (colGroups
                .Where(x => x.displayName.ToLower() == AdministrationGroup.ToLower())
                .FirstOrDefault() != null);
        }
    }

    void SelectedSurveyChange(object value)
    {
        var str = value;
    }

    void DialogClose(dynamic result)
    {
        if (result != null) // Survey was edited
        {
            Survey objSurvey = result as Survey;

            if (objSurvey != null)
            {
                // See if Survey is already in the list
                var ExistingSurvey = colSurveys.Where(x => x.Id == objSurvey.Id).FirstOrDefault();

                if (ExistingSurvey == null)
                {
                    // Survey does not exist - Add it
                    colSurveys.Add(objSurvey);
                }
                else
                {
                    // Update existing Survey
                    colSurveys.Remove(ExistingSurvey);
                    colSurveys.Add(objSurvey);
                }

                ExistingSurveys = true;

                StateHasChanged();

                SelectedSurvey = colSurveys.Where(x => x.Id == objSurvey.Id).FirstOrDefault();
            }
            else
            {
                // A Survey was deleted
                int? SurveyDeletedId = result as int?;

                if (SurveyDeletedId != null)
                {
                    var SurveyToDelete = colSurveys.Where(x => x.Id == SurveyDeletedId).FirstOrDefault();

                    if (SurveyToDelete != null)
                    {
                        colSurveys.Remove(SurveyToDelete);
                    }

                    if (colSurveys.Count > 0)
                    {
                        ExistingSurveys = true;
                        SelectedSurvey = colSurveys.FirstOrDefault();
                    }
                    else
                    {
                        ExistingSurveys = false;
                        SelectedSurvey = null;
                    }

                    StateHasChanged();
                }
            }
        }
    }
}