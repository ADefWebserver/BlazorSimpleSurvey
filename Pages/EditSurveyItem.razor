@using Models;
@using System.Linq;
@using BlazorSimpleSurvey.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SimpleSurveyService>
@strError
<RadzenCard Style="margin-bottom: 20px;">
    <div class="row">
        <div class="col-md-12">
            <div><b>Survey Item Name</b></div>
            <RadzenTextBox @bind-Value="SelectedSurveyItem.ItemLabel"
                           Style="width: 400px" />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div><b>Survey Item Type</b></div>
            <RadzenDropDown AllowClear="true" TValue="string"
                            Data="@FormTypes"
                            @bind-Value="SelectedSurveyItem.ItemType" />
            @if (SelectedSurveyItem.ItemType == "Dropdown")
            {
                <button type="button" class="btn btn-link" @onclick="OpenPopup">[Edit Options]</button>
            }
        </div>
    </div>
</RadzenCard>
<RadzenButton Click="UpdateSurveyItem"
              Text="Save" ButtonStyle="ButtonStyle.Success"
              Style="margin-bottom: 10px; width: 150px" />
@if (SelectedSurveyItem.Id > 0)
{
    <RadzenButton Click="DeleteSurveyItemDialog"
                  ButtonStyle="ButtonStyle.Danger"
                  Text="Delete"
                  Style="margin-bottom: 10px; width: 150px" />
}
@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block;background-color:gainsboro" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit Options</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current Category -->
                <div class="modal-body">
                    <ul style="list-style-type:none;">
                        @foreach (var option in newOptions)
                        {
                            <li>
                                <input @bind="option.OptionLabel" />
                                <button type="button" class="btn btn-link"
                                        @onclick="(() => RemoveOption(option))">
                                    [Delete]
                                </button>
                            </li>
                        }
                    </ul>

                    <input @bind="newOption" />
                    <button @onclick="AddOption">Add</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public SurveyItem SelectedSurveyItem { get; set; }

    string strError = "";
    bool ShowPopup = false;

    IEnumerable<string> FormTypes = new string[] { "TextBox", "TextArea", "Date", "DateTime", "Dropdown" };

    private string newOption;
    List<Models.SurveyItemOption> newOptions = new List<Models.SurveyItemOption>();

    async Task UpdateSurveyItem()
    {
        try
        {
            if (SelectedSurveyItem.Id == -1)
            {
                SelectedSurveyItem = await @Service.CreateSurveyItemAsync(SelectedSurveyItem);
            }
            else
            {
                SelectedSurveyItem = await @Service.UpdateSurveyItemAsync(SelectedSurveyItem);
            }

            dialogService.Close(SelectedSurveyItem);
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task DeleteSurveyItemDialog() => await dialogService
     .OpenAsync("Delete Survey Item", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Yes" Click="DeleteSurveyItem"
                              Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="No" Click="()=> ds.Close(false)"
                              ButtonStyle="ButtonStyle.Secondary"
                              Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);


void OpenPopup()
{
// Open Popup
ShowPopup = true;
}

void ClosePopup()
{
// Close Popup
ShowPopup = false;
}

private void AddOption()
{
if (!string.IsNullOrWhiteSpace(newOption))
{
Guid newGuid = Guid.NewGuid();

newOptions.Add(new Models.SurveyItemOption { OptionLabel = newOption, Id = -1 });
newOption = string.Empty;
}
}

private void RemoveOption(Models.SurveyItemOption paramSurveyItemOption)
{
// Remove the option from the collection
newOptions.Remove(paramSurveyItemOption);
}

async Task DeleteSurveyItem()
{
var result = await @Service.DeleteSurveyItemAsync(SelectedSurveyItem);

dialogService.Close(SelectedSurveyItem.Id);
dialogService.Close(SelectedSurveyItem.Id);
}
}