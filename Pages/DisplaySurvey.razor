@page "/displaysurvey"
@using Models;
@using System.Linq;
@using BlazorSimpleSurvey.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SimpleSurveyService>
@strError
<h3>Display Survey</h3>
@*
    @if(isAuthenticated)
    {
*@

@if (ExistingSurveys == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    @if (ExistingSurveys.Value == true)
    {
        <RadzenDropDown TValue="Survey"
                        Data="@colSurveys"
                        TextProperty="SurveyName"
                        @bind-Value="SelectedSurvey"
                        Change="@(args => SelectedSurveyChange(args))" />

        <br />
        <br />
    }

}


@*
    }
    else
    {
        <h4>You must be logged in to take a Survey</h4>
    }
*@

@code {
    string strError = "";
    System.Security.Claims.ClaimsPrincipal user;
    bool isAuthenticated = false;
    int UserId = -1;

    bool? ExistingSurveys = null;
    List<Survey> colSurveys = new List<Survey>();
    Survey SelectedSurvey = new Survey();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            user = authState.User;

            if (user.Identity.IsAuthenticated != false)
            {
                isAuthenticated = true;

                var Objectidentifier = user.Claims
                    .FirstOrDefault(c =>
                    c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

                UserId = @Service.GetAllUsersAsync()
                    .Where(x => x.Objectidentifier == Objectidentifier)
                    .FirstOrDefault().Id;
            }

            colSurveys = await @Service.GetAllSurveysAsync();

            if (colSurveys.Count > 0)
            {
                ExistingSurveys = true;
                SelectedSurvey = colSurveys.FirstOrDefault();
            }
            else
            {
                ExistingSurveys = false;
            }
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    // SelectedSurveyChange

    async Task SelectedSurveyChange(object value)
    {
        await RefreshSurveys(SelectedSurvey.Id);
    }

    // Refresh RefreshSurveys

    async Task RefreshSurveys(int SurveyId)
    {
        colSurveys = await @Service.GetAllSurveysAsync();
        SelectedSurvey = colSurveys.Where(x => x.Id == SurveyId).FirstOrDefault();
    }

    // Refresh RefreshSurvey

    async Task RefreshSurvey(int SurveyId)
    {
        SelectedSurvey = await @Service.GetSurvey(SurveyId);
    }

}
