@page "/displaysurvey"
@using Models;
@using System.Linq;
@using BlazorSimpleSurvey.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SimpleSurveyService>
@strError
@*
    @if(isAuthenticated)
    {
*@

@if (ExistingSurveys == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    @if (ExistingSurveys.Value == true)
    {
        <RadzenDropDown TValue="DTOSurvey"
                        Data="@colSurveys"
                        TextProperty="SurveyName"
                        @bind-Value="SelectedSurvey"
                        Change="@(args => SelectedSurveyChange(args))" />

        <br />
        <hr />
        <div>
            @foreach (var SurveyItem in SelectedSurvey.SurveyItem.OrderBy(x => x.Position))
            {
                <div class="row">
                    <div class="col-md-9" style="text-align: left;margin-bottom: 20px">
                        <b>@SurveyItem.ItemLabel</b>
                        <br />
                        @if (SurveyItem.ItemType == "Text Box")
                        {
                            <RadzenTextBox MaxLength="4000" />
                        }
                        @if (SurveyItem.ItemType == "Text Area")
                        {
                            <RadzenTextArea MaxLength="4000" />
                        }
                        @if (SurveyItem.ItemType == "Date")
                        {
                            <RadzenDatePicker DateFormat="d" TValue="DateTime?" ShowTime="false" />
                        }
                        @if (SurveyItem.ItemType == "Date Time")
                        {
                            <RadzenDatePicker TValue="DateTime?" ShowTime="true" />
                        }
                        @if (SurveyItem.ItemType == "Dropdown")
                        {
                            <RadzenDropDown AllowClear="true" TValue="string"
                                            Data="@SurveyItem.SurveyItemOption.OrderBy(x => x.Id)"
                                            TextProperty="OptionLabel" ValueProperty="SurveyItemOptionId" />
                        }
                        @if (SurveyItem.ItemType == "Multi-Select Dropdown")
                        {
                            <RadzenDropDown AllowFiltering="true" AllowClear="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            TValue="string" Multiple="true" Placeholder="Select..."
                                            Data="@SurveyItem.SurveyItemOption.OrderBy(x => x.Id)"
                                            TextProperty="OptionLabel" ValueProperty="SurveyItemOptionId" />
                        }
                    </div>
                </div>
            }
        </div>
        @if (SelectedSurvey.SurveyItem.Count == 0)
        {
            <h4>No Survey Items</h4>
        }
        <br />
    }
}
@*
    }
    else
    {
        <h4>You must be logged in to take a Survey</h4>
    }
*@
@code {
    string strError = "";
    System.Security.Claims.ClaimsPrincipal user;
    bool isAuthenticated = false;
    int UserId = -1;

    bool? ExistingSurveys = null;
    List<Survey> colSurveys = new List<Survey>();
    DTOSurvey SelectedSurvey = new DTOSurvey();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            user = authState.User;

            if (user.Identity.IsAuthenticated != false)
            {
                isAuthenticated = true;

                var Objectidentifier = user.Claims
                    .FirstOrDefault(c =>
                    c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

                UserId = @Service.GetAllUsersAsync()
                    .Where(x => x.Objectidentifier == Objectidentifier)
                    .FirstOrDefault().Id;
            }

            colSurveys = await @Service.GetAllSurveysAsync();

            if (colSurveys.Count > 0)
            {
                ExistingSurveys = true;
                SelectedSurvey = ConvertToDTO(colSurveys.FirstOrDefault());
            }
            else
            {
                ExistingSurveys = false;
            }
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    // SelectedSurveyChange

    async Task SelectedSurveyChange(object value)
    {
        await RefreshSurveys(SelectedSurvey.Id);
    }

    // Refresh RefreshSurveys

    async Task RefreshSurveys(int SurveyId)
    {
        colSurveys = await @Service.GetAllSurveysAsync();
        SelectedSurvey = ConvertToDTO(colSurveys.Where(x => x.Id == SurveyId).FirstOrDefault());
    }

    // Refresh RefreshSurvey

    async Task RefreshSurvey(int SurveyId)
    {
        SelectedSurvey = ConvertToDTO(await @Service.GetSurvey(SurveyId));
    }

    private DTOSurvey ConvertToDTO(Survey objSurvey)
    {
        DTOSurvey objDTOSurvey = new DTOSurvey();
        objDTOSurvey.Id = objSurvey.Id;
        objDTOSurvey.SurveyName = objSurvey.SurveyName;

        objDTOSurvey.SurveyItem = new List<DTOSurveyItem>();

        foreach (var SurveyItem in objSurvey.SurveyItem)
        {
            DTOSurveyItem objDTOSurveyItem = new DTOSurveyItem();

            objDTOSurveyItem.Id = SurveyItem.Id;
            objDTOSurveyItem.ItemLabel = SurveyItem.ItemLabel;
            objDTOSurveyItem.ItemType = SurveyItem.ItemType;
            objDTOSurveyItem.Position = SurveyItem.Position;
            objDTOSurveyItem.Required = SurveyItem.Required;

            objDTOSurveyItem.SurveyItemOption = new List<DTOSurveyItemOption>();

            foreach (var SurveyItemOption in objDTOSurveyItem.SurveyItemOption)
            {
                DTOSurveyItemOption objDTOSurveyItemOption = new DTOSurveyItemOption();

                objDTOSurveyItemOption.Id = objDTOSurveyItemOption.Id;
                objDTOSurveyItemOption.OptionLabel = objDTOSurveyItemOption.OptionLabel;
                objDTOSurveyItemOption.SurveyItem = objDTOSurveyItemOption.SurveyItem;

                objDTOSurveyItem.SurveyItemOption.Add(objDTOSurveyItemOption);
            }

            objDTOSurvey.SurveyItem.Add(objDTOSurveyItem);
        }

        return objDTOSurvey;
    }

}
