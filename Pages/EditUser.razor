@using Microsoft.Identity.Client;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Radzen.DialogService dialogService
<RadzenCard Style="margin-bottom: 20px;">
    <div class="row">
        <div class="col-md-4">
            <div>Display Name:</div>
            <RadzenTextBox @bind-Value="GraphUser.displayName" Style="width: 200px" />
            <div style="margin-top:20px">First Name:</div>
            <RadzenTextBox @bind-Value="GraphUser.givenName" Style="width: 200px" />
            <div style="margin-top:20px">Last Name:</div>
            <RadzenTextBox @bind-Value="GraphUser.surname" Style="width: 200px" />
            <br />
        </div>
        <div class="col-md-8">
            <div>Groups:</div>
            <ul class="list-group">
                @foreach (var group in colGroups)
                {
                    <li class="list-group-item">
                        <p>@group.displayName</p>
                    </li>
                }
            </ul>
            @if ((isAdmin != null) && (GraphUser.id != CurrentUserID))
            {
                @if (!isAdmin.Value)
                {
                    <RadzenButton Click="AddToAdminGroup" 
                                  Text="Add To Admin Group" 
                                  ButtonStyle="ButtonStyle.Success" 
                                  Style="margin-top: 20px; width: 300px" />
                }
                else
                {
                    <RadzenButton Click="RemoveFromAdminGroup" 
                                  Text="Remove From Admin Group" 
                                  ButtonStyle="ButtonStyle.Danger" 
                                  Style="margin-top: 20px; width: 300px" />
                }
            }
        </div>
    </div>
</RadzenCard>
<div class="row">
    <div class="col-md-12">
        <RadzenButton Click="UpdateUser"
                      Text="Save" ButtonStyle="ButtonStyle.Success"
                      Style="margin-bottom: 10px; width: 150px" />
        @if (GraphUser.id != CurrentUserID)
        {
            <RadzenButton Click="DeleteUserDialog"
                          ButtonStyle="ButtonStyle.Danger"
                          Text="Delete"
                          Style="margin-bottom: 10px; width: 150px" />
        }
    </div>
    @strError
</div>

@code {
    [Parameter] public GraphUser GraphUser { get; set; }

    string strError = "";
    string AdministrationGroup;
    string AdminGroupId;
    bool? isAdmin = null;
    System.Security.Claims.ClaimsPrincipal user;
    string CurrentUserID;

    HttpClient httpClient;
    ProtectedApiCallHelper apiCaller;
    GraphServiceClient graphClient;

    List<GraphGroup> colGroups = new List<GraphGroup>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState =
                await AuthenticationStateProvider.GetAuthenticationStateAsync();

            user = authState.User;

            CurrentUserID =
                user.Claims.FirstOrDefault(
                    c => c.Type ==
                    "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?
                    .Value;

            AdministrationGroup = _configuration["AzureAdB2CManagement:AdministrationGroup"];

            IConfidentialClientApplication confidentialClientApplication =
                ConfidentialClientApplicationBuilder
                .Create(_configuration["AzureAdB2CManagement:ClientId"])
                .WithTenantId(_configuration["AzureAdB2CManagement:Tenant"])
                .WithClientSecret(_configuration["AzureAdB2CManagement:ClientSecret"])
                .Build();

            // With client credentials flows the scopes is ALWAYS of the shape
            // "resource/.default", as the
            // application permissions need to be set statically
            // (in the portal or by PowerShell),
            // and then granted by a tenant administrator
            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            // Create an authentication provider by passing in a client 
            // application and graph scopes.
            AuthenticationResult authenticationResult =
                await confidentialClientApplication.AcquireTokenForClient(scopes)
                .ExecuteAsync();

            ClientCredentialProvider authProvider =
                new ClientCredentialProvider(confidentialClientApplication);

            // Create a new instance of GraphServiceClient with the authentication provider.
            graphClient = new GraphServiceClient(authProvider);

            // Get Admin Group Id
            var GroupCollection = await graphClient.Groups.Request()
                .Filter($"startsWith(displayName,'{AdministrationGroup}')")
                .GetAsync();

            AdminGroupId = GroupCollection.ToList().Where(g => g.DisplayName == AdministrationGroup).FirstOrDefault().Id;

            httpClient = new HttpClient();

            apiCaller = new ProtectedApiCallHelper(httpClient);

            if (GraphUser.id != null)
            {
                await apiCaller.CallWebApiAndProcessResultASync(
                $"https://graph.microsoft.com/v1.0/users/{GraphUser.id}/memberOf",
                authenticationResult.AccessToken,
                DisplayGroups
                );
            }

        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private void DisplayGroups(JObject result)
    {
        colGroups = new List<GraphGroup>();

        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            colGroups.AddRange(
            child.Value.ToObject<List<GraphGroup>>()
            );
        }

        if (AdministrationGroup != "")
        {
            isAdmin = (colGroups
                .Where(x => x.displayName.ToLower() == AdministrationGroup.ToLower())
                .FirstOrDefault() != null);
        }

        if (colGroups.Count == 0)
        {
            colGroups.Add(new GraphGroup { displayName = "[None]" });
        }
    }

    async Task AddToAdminGroup()
    {
        // Get selected user
        var selectedUser = 
            graphClient.Users[GraphUser.id]
            .Request().GetAsync();

        // Create a Directory Object for the selected user
        var directoryObject = new DirectoryObject
        {
            Id = GraphUser.id
        };

        await graphClient.Groups[$"{AdminGroupId}"].Members.References
            .Request().AddAsync(directoryObject);

        dialogService.Close(true);
    }

    async Task RemoveFromAdminGroup()
    {
        await graphClient
            .Groups[$"{AdminGroupId}"]
            .Members[$"{GraphUser.id}"].Reference
            .Request()
            .DeleteAsync();

        dialogService.Close(true);
    }

    async Task UpdateUser()
    {
        var UpdateUser = new User
        {
            DisplayName = GraphUser.displayName,
            Surname = GraphUser.surname,
            GivenName = GraphUser.givenName
        };

        await graphClient.Users[GraphUser.id].Request().UpdateAsync(UpdateUser);

        dialogService.Close(true);
    }

    async Task DeleteUserDialog() => await dialogService.OpenAsync("Delete User", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Yes" Click="DeleteUser" 
                              Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="No" Click="()=> ds.Close(false)" 
                              ButtonStyle="ButtonStyle.Secondary" 
                              Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);

    async Task DeleteUser()
    {
        await graphClient.Users[GraphUser.id]
            .Request()
            .DeleteAsync();

        dialogService.Close(true);
        dialogService.Close(true);
    }
}